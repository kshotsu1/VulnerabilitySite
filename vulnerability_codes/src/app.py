from flask import (
    Flask,
    render_template,
    request,
    redirect,
    url_for,
    session,
    flash,
    send_from_directory,
    send_file,
    jsonify
)
import sqlite3
import os
import logging
from logging.handlers import RotatingFileHandler
from werkzeug.exceptions import InternalServerError

app = Flask(__name__, static_folder="../static")
app.secret_key = "your_secret_key"  # セッションに必要


# データベース接続
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATABASE = os.path.join(BASE_DIR, "..", "thread.db")


def get_db():
    db = sqlite3.connect(DATABASE)
    db.row_factory = sqlite3.Row
    return db


@app.route("/")
def index():
    return render_template("/index.html")


@app.route("/sitemap.xml")
def sitemap():
    return app.send_static_file("sitemap.xml")


# ログイン画面のルート
@app.route("/login", methods=["GET", "POST"])
def login():
    try:
        if request.method == "POST":
            user_id = request.form.get("user_id")
            password = request.form.get("password")

            db = get_db()
            # ユーザーの認証
            sql = f"SELECT * FROM user_list WHERE user_id = '{user_id}' AND pass = '{password}';"
            # user = db.execute("SELECT * FROM user_list WHERE user_id = ? AND pass = ?", (user_id, password)).fetchone()
            user = db.execute(sql).fetchone()
            # user = db.executemany(sql)
            db.close()

            if user:
                # ログイン成功、セッションにuser_idを保存
                session["user_id"] = user["user_id"]
                return redirect(url_for("threads"))
            else:
                # ログイン失敗
                return "ユーザーIDまたはパスワードが間違っています"

        return render_template("login.html")
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500
    

@app.route("/entry", methods=["GET", "POST"])
def entry():
    try:
        if request.method == "POST":
            name = request.form.get("name")
            birthday = request.form.get("birthday")
            email = request.form.get("email")
            user_id = request.form.get("user_id")
            password1 = request.form.get("password1")
            password2 = request.form.get("password2")

            if not all([name, birthday, email, user_id, password1, password2]):
                raise ValueError("All fields are required")

            if password1 != password2:
                return "パスワードが一致しません"

            db = get_db()
            sql = f"INSERT INTO user_list (name, birthday, user_id, email, pass) VALUES ('{name}', '{birthday}', '{user_id}', '{email}', '{password1}');"
            db.execute(sql)
            db.commit()
            db.close()
            return redirect(url_for("login"))

        return render_template("entry.html")
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500



# 投稿ページのルート
@app.route("/post", methods=["GET", "POST"])
def post():
    try:
        if "user_id" not in session:
            return redirect(
                url_for("login")
            )  # ログインしていない場合はログインページにリダイレクト
        if request.method == "POST":
            content = request.form.get("content", "")
            print(content)
            db = get_db()
            # db.execute("INSERT INTO threads (user_id, content) VALUES (?, ?)", (session['user_id'], content))
            sql = f"INSERT INTO threads (user_id, content) VALUES ('{session['user_id']}', '{content}');"
            db.execute(sql)
            db.commit()
            db.close()
            return redirect(url_for("threads"))

        return render_template("post.html")
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500

# スレッド一覧表示ページ
@app.route("/threads")
def threads():
    try:
        db = get_db()
        threads = db.execute("SELECT * FROM threads").fetchall()
        db.close()
        # セッションに user_id が存在するか確認
        user_id = session.get("user_id", None)
        session_id = request.cookies.get("session")
        return render_template(
            "threads.html", threads=threads, user_id=user_id, session_id=session_id
        )
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500


@app.route("/my_page", methods=["GET", "POST"])
def my_page():
    try:
        # session変数の値を受け取る処理
        db = get_db()
        user_id = session.get("user_id", None)
        my_threads = db.execute(
            "SELECT * FROM threads WHERE user_id = ?", (user_id,)
        ).fetchall()
        db.close()
        session_id = request.args.get("session_id")
        # 取得したセッションの値をURLに表示させる
        # my_page?sessonid=ghjifhdjska48340nのようなURLにする
        # リファラを使って、別のサイトでsessionIDを抽出する
        # return render_template('{sesson}/my_page.html', my_threads=my_threads, user_id=user_id)

        return render_template(
            "my_page.html", my_threads=my_threads, user_id=user_id, session_id=session_id
        )
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500


@app.route("/my_data", methods=["GET", "POST"])
def my_data():
    try:
        db = get_db()
        cursor = db.cursor()
        sql = "SELECT * FROM user_list WHERE user_id = ?;"
        cursor.execute(sql, (session["user_id"],))
        my_data = cursor.fetchone()  # Fetch one row of data
        db.commit()
        db.close()

        session_id = request.args.get("session_id")
        referrer = request.referrer  # リファラを取得

        return render_template(
            "my_data.html", my_data=my_data, referrer=referrer, session_id=session_id
        )
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500


# ログアウト
@app.route("/logout")
def logout():
    session.pop("user_id", None)  # セッションから user_id を削除
    return redirect(url_for("login"))


@app.route("/attack")
def attack():
    return render_template("attack.html")


@app.route("/click_jacking")
def click_jacking():
    return render_template("click_jacking.html")


@app.route("/csrf_attack")
def csrf_attack():
    return render_template("csrf_attack.html")


@app.route("/csrf_attack", methods=["GET", "POST"])
def change_password():
    try:
        if request.method == "POST":
            # パスワード変更の処理をここに記述
            new_password = request.form["new_password"]
            confirm_new_password = request.form["confirm_new_password"]

            if new_password == confirm_new_password:
                # パスワード変更が成功した場合
                return redirect(url_for("login"))  # ログインページにリダイレクト
            else:
                return "新しいパスワードが一致しません", 400

        return render_template("csrf_attack.html")
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500


@app.route("/contact", methods=["GET", "POST"])
def contact():
    try:
        if request.method == "POST":
            mail = request.form.get("mail")
            inqu = request.form.get("inqu")

            if not mail or not inqu:
                raise ValueError("メールアドレスとお問い合わせ内容は必須です")

            # メール送信のコマンドを組み立てる
            command = rf'powershell -Command "Add-Content -Path .\static\user_contact\contact.txt -Value {mail},{inqu} -Encoding utf8"'
            # コマンドを実行
            os.system(command)
            return f"""{ mail }のアドレスでお問い合わせを受け付けました。<br><button onclick="window.location.href='/my_page'">マイページ</button>"""
        else:
            db = get_db()
            cursor = db.cursor()
            sql = "SELECT * FROM user_list WHERE user_id = ?;"
            cursor.execute(sql, (session["user_id"],))
            my_data = cursor.fetchone()  # Fetch one row of data
            db.commit()
            db.close()
            return render_template("contact.html", my_data=my_data)
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500


@app.route("/show_introduction")
def read_file():
    try:
        filename = request.args.get("filename")
        path = request.args.get("path")
        file_path = os.path.join(path, filename).replace("\\", "/")
        # if not os.path.exists(file_path):
        #     raise FileNotFoundError(f"File not found: {file_path}")

        return send_from_directory(os.path.dirname(file_path), os.path.basename(file_path))
    except:
        app.logger.error("500 error: ", exc_info=True, stack_info=True)
        return "500 error", 500

# HTTP 500エラー専用のエラーハンドラー
@app.errorhandler(500)
def handle_500_error(e):
    app.logger.error("500エラーが発生しました: ", exc_info=True, stack_info=True)
    return render_template("500.html"), 500  # カスタムHTMLやメッセージを表示可能


if __name__ == "__main__":
    # ログハンドラを作成
    log_file = "app_log.log"  # ここでログファイルの名前を指定
    file_handler = RotatingFileHandler(log_file, maxBytes=10240, backupCount=10)
    file_handler.setLevel(logging.ERROR)
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
    ))
    app.logger.addHandler(file_handler)
    app.run(debug=True, port=5000)  # 5000で起動
