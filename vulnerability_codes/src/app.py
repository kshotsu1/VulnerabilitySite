from flask import (
    Flask,
    render_template,
    request,
    redirect,
    url_for,
    session,
    flash,
    send_from_directory,
    send_file,
)
import sqlite3
import os
# import matplotlib.pyplot as plt

app = Flask(__name__, static_folder="../static")
app.secret_key = "your_secret_key"  # セッションに必要


# データベース接続
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
DATABASE = os.path.join(BASE_DIR, "..", "thread.db")


def get_db():
    db = sqlite3.connect(DATABASE)
    db.row_factory = sqlite3.Row
    return db


@app.route("/")
def index():
    return render_template("/index.html")


@app.route("/sitemap.xml")
def sitemap():
    return app.send_static_file("sitemap.xml")


# ログイン画面のルート
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == "POST":
        user_id = request.form.get("user_id")
        password = request.form.get("password")

        db = get_db()
        # ユーザーの認証
        sql = f"SELECT * FROM user_list WHERE user_id = '{user_id}' AND pass = '{password}';"
        # user = db.execute("SELECT * FROM user_list WHERE user_id = ? AND pass = ?", (user_id, password)).fetchone()
        user = db.execute(sql).fetchone()
        # user = db.executemany(sql)
        db.close()

        if user:
            # ログイン成功、セッションにuser_idを保存
            session["user_id"] = user["user_id"]
            print(session)
            return redirect(url_for("threads"))
        else:
            # ログイン失敗
            return "ユーザーIDまたはパスワードが間違っています"

    return render_template("login.html")


@app.route("/entry", methods=["GET", "POST"])
def entry():
    if request.method == "POST":
        name = request.form.get("name")
        birthday = request.form.get("birthday")
        email = request.form.get("email")
        user_id = request.form.get("user_id")
        password1 = request.form.get("password1")
        password2 = request.form.get("password2")
        if password1 == password2:
            db = get_db()
            # db.execute("INSERT INTO threads (user_id, content) VALUES (?, ?)", (session['user_id'], content))
            sql = f"INSERT INTO user_list (name, birthday, user_id, email, pass) VALUES ('{name}', '{birthday}', '{user_id}', '{email}', '{password1}');"
            db.execute(sql)
            db.commit()
            db.close()
            return redirect(url_for("login"))
        else:
            return "パスワードが一致しません"

    return render_template("entry.html")


# 投稿ページのルート
@app.route("/post", methods=["GET", "POST"])
def post():
    if "user_id" not in session:
        return redirect(
            url_for("login")
        )  # ログインしていない場合はログインページにリダイレクト
    if request.method == "POST":
        content = request.form.get("content", "")
        print(content)
        db = get_db()
        # db.execute("INSERT INTO threads (user_id, content) VALUES (?, ?)", (session['user_id'], content))
        sql = f"INSERT INTO threads (user_id, content) VALUES ('{session['user_id']}', '{content}');"
        db.execute(sql)
        db.commit()
        db.close()
        return redirect(url_for("threads"))

    return render_template("post.html")


# スレッド一覧表示ページ
@app.route("/threads")
def threads():
    db = get_db()
    threads = db.execute("SELECT * FROM threads").fetchall()
    db.close()
    # セッションに user_id が存在するか確認
    user_id = session.get("user_id", None)
    session_id = request.cookies.get("session")
    return render_template(
        "threads.html", threads=threads, user_id=user_id, session_id=session_id
    )


@app.route("/my_page", methods=["GET", "POST"])
def my_page():
    # session変数の値を受け取る処理
    db = get_db()
    user_id = session.get("user_id", None)
    my_threads = db.execute(
        "SELECT * FROM threads WHERE user_id = ?", (user_id,)
    ).fetchall()
    db.close()
    session_id = request.args.get("session_id")
    # 取得したセッションの値をURLに表示させる
    # my_page?sessonid=ghjifhdjska48340nのようなURLにする
    # リファラを使って、別のサイトでsessionIDを抽出する
    # return render_template('{sesson}/my_page.html', my_threads=my_threads, user_id=user_id)

    return render_template(
        "my_page.html", my_threads=my_threads, user_id=user_id, session_id=session_id
    )


@app.route("/my_data", methods=["GET", "POST"])
def my_data():
    db = get_db()
    cursor = db.cursor()
    sql = "SELECT * FROM user_list WHERE user_id = ?;"
    cursor.execute(sql, (session["user_id"],))
    my_data = cursor.fetchone()  # Fetch one row of data
    db.commit()
    db.close()
    session_id = request.args.get("session_id")
    referrer = request.referrer  # リファラを取得
    return render_template(
        "my_data.html", my_data=my_data, referrer=referrer, session_id=session_id
    )


# ログアウト
@app.route("/logout")
def logout():
    session.pop("user_id", None)  # セッションから user_id を削除
    return redirect(url_for("login"))


@app.route("/attack")
def attack():
    return render_template("attack.html")


@app.route("/click_jacking")
def click_jacking():
    return render_template("click_jacking.html")


@app.route("/csrf_attack")
def csrf_attack():
    return render_template("csrf_attack.html")


@app.route("/csrf_attack", methods=["GET", "POST"])
def change_password():
    if request.method == "POST":
        # パスワード変更の処理をここに記述
        new_password = request.form["new_password"]
        confirm_new_password = request.form["confirm_new_password"]

        if new_password == confirm_new_password:
            # パスワード変更が成功した場合
            return redirect(url_for("login"))  # ログインページにリダイレクト
        else:
            return "新しいパスワードが一致しません", 400

    return render_template("csrf_attack.html")


@app.route("/contact", methods=["GET", "POST"])
def contact():
    if request.method == "POST":
        mail = request.form.get("mail")
        inqu = request.form.get("inqu")
        # メール送信のコマンドを組み立てる
        # command = f"echo '{mail}, {inqu}' >> ../static/user_contact/contact.txt"
        command = rf'powershell -Command "Add-Content -Path .\static\user_contact\contact.txt -Value {mail},{inqu} -Encoding utf8"'
        # command = fr'powershell -Command "Add-Content -Path .\static\user_contact\contact.txt -Value {mail},{inqu} "'
        # コマンドを実行
        os.system(command)
        return f"""{ mail }のアドレスでお問い合わせを受け付けました。<br><button onclick="window.location.href='/my_page'">マイページ</button>"""
    else:
        db = get_db()
        cursor = db.cursor()
        sql = "SELECT * FROM user_list WHERE user_id = ?;"
        cursor.execute(sql, (session["user_id"],))
        my_data = cursor.fetchone()  # Fetch one row of data
        db.commit()
        db.close()
        return render_template("contact.html", my_data=my_data)


@app.route("/show_introduction")
def read_file():
    filename = request.args.get("filename")
    path = request.args.get("path")
    file_path = os.path.join(path, filename)
    return send_from_directory(os.path.dirname(file_path), os.path.basename(file_path))


if __name__ == "__main__":
    app.run(debug=True, port=5000)  # 5000で起動
